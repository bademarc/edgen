# Docker Compose for LayerEdge with Official Scweet v3.0+ integration
version: '3.8'

# PRIORITY FIX: Define custom network for proper service communication
networks:
  layeredge-network:
    driver: bridge

services:
  # Main Next.js application
  layeredge-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SCWEET_SERVICE_URL=http://scweet-service:8001  # Internal Docker network URL
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - TWITTER_CLIENT_ID=${TWITTER_CLIENT_ID}
      - TWITTER_CLIENT_SECRET=${TWITTER_CLIENT_SECRET}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
    depends_on:
      scweet-service:
        condition: service_healthy  # Wait for Scweet service to be healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - layeredge-network

  # Official Scweet v3.0+ scraping service
  scweet-service:
    build:
      context: .
      dockerfile: Dockerfile.scweet
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - CHROME_BIN=/usr/bin/google-chrome
      - DISPLAY=:99
      - SCWEET_HEADLESS=true
      - SCWEET_DISABLE_IMAGES=true
      - SCWEET_CONCURRENCY=2  # Lower for stability
      # Twikit configuration
      - TWIKIT_USERNAME=${TWIKIT_USERNAME}
      - TWIKIT_EMAIL=${TWIKIT_EMAIL}
      - TWIKIT_PASSWORD=${TWIKIT_PASSWORD}
      - TWIKIT_LANGUAGE=en-US
      - TWIKIT_TIMEOUT=30
    volumes:
      - scweet_cookies:/app/cookies
      - /dev/shm:/dev/shm  # Shared memory for Chrome
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    # PRIORITY FIX: Add health check for proper service discovery
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - layeredge-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    # PRIORITY FIX: Add health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - layeredge-network

volumes:
  redis_data:
  scweet_cookies:

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   // Removed @unique constraint as Twitter OAuth might not provide email
  emailVerified DateTime?
  image         String?
  xUsername     String?   @unique
  xUserId       String?   @unique
  totalPoints   Int       @default(0)
  rank          Int?
  joinDate      DateTime  @default(now())

  // Automatic monitoring fields
  autoMonitoringEnabled Boolean @default(true)
  lastTweetCheck        DateTime?
  tweetCheckCount       Int @default(0)

  // Twitter OAuth token fields
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?

  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  pointsHistory PointsHistory[]
  tweetMonitoring TweetMonitoring[]
  tweetTracking TweetTracking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id           String   @id @default(cuid())
  url          String   @unique
  content      String?
  userId       String
  likes        Int      @default(0)
  retweets     Int      @default(0)
  replies      Int      @default(0)
  basePoints   Int      @default(5)
  bonusPoints  Int      @default(0)
  totalPoints  Int      @default(5)
  isVerified   Boolean  @default(false)
  lastEngagementUpdate DateTime? // Track when engagement was last updated
  engagementUpdateCount Int @default(0) // Track how many times engagement was updated

  // Automatic discovery fields
  tweetId      String?  // Twitter's internal tweet ID
  discoveredAt DateTime? // When this tweet was automatically discovered
  isAutoDiscovered Boolean @default(false) // Whether this was found automatically

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pointsHistory PointsHistory[]
}

model PointsHistory {
  id           String   @id @default(cuid())
  userId       String
  tweetId      String?
  pointsAwarded Int
  reason       String
  createdAt    DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet? @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model TweetMonitoring {
  id           String   @id @default(cuid())
  userId       String
  lastCheckAt  DateTime @default(now())
  tweetsFound  Int      @default(0)
  status       String   @default("active") // active, paused, error
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model TweetTracking {
  id                String   @id @default(cuid())
  tweetId           String   @unique
  authorId          String
  userId            String?
  pointsAwarded     Int      @default(1)
  processedAt       DateTime @default(now())
  tweetContent      String?
  engagementMetrics Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([authorId])
  @@index([processedAt])
}

model SystemConfig {
  key       String   @id
  value     String
  updatedAt DateTime @default(now()) @updatedAt
}

model UnclaimedTweet {
  id              String   @id @default(cuid())
  tweetId         String   @unique
  content         String
  authorUsername  String
  authorId        String
  likes           Int      @default(0)
  retweets        Int      @default(0)
  replies         Int      @default(0)
  createdAt       DateTime
  claimed         Boolean  @default(false)
  claimedBy       String?
  claimedAt       DateTime?
  discoveredAt    DateTime @default(now())
  source          String   @default("unknown") // twscrape, rss, scraper, etc.

  @@index([authorUsername])
  @@index([authorId])
  @@index([claimed])
  @@index([discoveredAt])
}

model TrackingLog {
  id          String   @id @default(cuid())
  method      String   // 'twscrape', 'rss', 'user_submit', 'bearer_api', 'oauth_api', 'scraper'
  success     Boolean
  tweetsFound Int
  error       String?
  timestamp   DateTime @default(now())
  duration    Int?     // Duration in milliseconds
  metadata    Json?    // Additional tracking data

  @@index([method])
  @@index([timestamp])
  @@index([success])
}
